<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".wxs" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    static string GetRelativePath(string fromPath, string toPath)
    {
        var fromUri = new Uri(fromPath);
        var toUri = new Uri(toPath);
        var relativeUri = fromUri.MakeRelativeUri(toUri);
        return Uri.UnescapeDataString(relativeUri.ToString());
    }

    const string relativePath = @"..\..\bin\Release\";

    var templatePath = Host.ResolvePath("Folders.tt");
    var templateDirectoryName = Path.GetDirectoryName(templatePath);
    if (templateDirectoryName is null)
    {
        throw new InvalidOperationException($"Could not find directory for template '{templatePath}'");
    }

    if (!Directory.Exists(templateDirectoryName))
    {
        throw new DirectoryNotFoundException($"Could not find directory '{templateDirectoryName}'");
    }

    var relativeDirectory = Path.Combine(templateDirectoryName, relativePath);
    var absoluteDirectory = Path.GetFullPath(relativeDirectory);
    if (!Directory.Exists(absoluteDirectory))
    {
        throw new DirectoryNotFoundException($"Could not find absolute directory '{absoluteDirectory}'");
    }
#>
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
    <Fragment>
        <StandardDirectory Id="LocalAppDataFolder">
            <Directory Id="ManufacturerFolder" Name="Spectralyzer">
                <Directory Id="INSTALLFOLDER" Name="Spectralyzer">
<#
    var directoriesToScan = new Stack<string>();
    var openDirectories = new Stack<string>();
    directoriesToScan.Push(absoluteDirectory);

    while (directoriesToScan.Count > 0)
    {
        var currentDirectory = directoriesToScan.Pop();

        if (openDirectories.Count > 0 && !currentDirectory.StartsWith(openDirectories.Peek()))
        {
            if (openDirectories.Count > 0 && !currentDirectory.StartsWith(openDirectories.Peek()))
            {
                var indentCount = openDirectories.Count - 2;
                var indent = string.Concat(Enumerable.Repeat("    ", indentCount));
                openDirectories.Pop();
#>
                    <#= indent #></Directory>
<#
            }
        }

        if (!Directory.Exists(currentDirectory)) continue;
        if (currentDirectory.IndexOf("arm64", StringComparison.InvariantCultureIgnoreCase) > -1) continue;
        
        var path = GetRelativePath(absoluteDirectory, currentDirectory);
        var directoryName = new DirectoryInfo(currentDirectory).Name;
        var name = path.Replace("\\", string.Empty)
                       .Replace("/", string.Empty)
                       .Replace(".", string.Empty)
                       .Replace(":", string.Empty)
                       .Replace("-", string.Empty);

        if (!string.IsNullOrEmpty(name))
        {
            var indentCount = openDirectories.Count - 1;
            var indent = string.Concat(Enumerable.Repeat("    ", indentCount));
#>
                    <#= indent #><Directory Id="<#= name #>Folder" Name="<#= directoryName #>">
<#
        }

        openDirectories.Push(currentDirectory);

        var subdirectories = Directory.GetDirectories(currentDirectory);
        foreach (var subdirectory in subdirectories)
        {
            directoriesToScan.Push(subdirectory);
        }
    }
    
    // Close any remaining open directories
    while (openDirectories.Count > 1)
    {
        var indentCount = openDirectories.Count - 2;
        var indent = string.Concat(Enumerable.Repeat("    ", indentCount));
        openDirectories.Pop();
#>
                    <#= indent #></Directory>
<# 
    }
#>
                </Directory>
            </Directory>
        </StandardDirectory>
    </Fragment>
</Wix>